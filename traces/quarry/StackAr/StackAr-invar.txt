===========================================================================
DataStructures.StackAr:::CLASS
===========================================================================
DataStructures.StackAr:::OBJECT
this.theArray != null
this.theArray.getClass() == java.lang.Object[].class
this.topOfStack >= -1
this.topOfStack <= size(this.theArray[])-1
DataStructures.StackAr.DEFAULT_CAPACITY != size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.StackAr(int):::ENTER
capacity >= 0
===========================================================================
DataStructures.StackAr.StackAr(int):::EXIT
orig(capacity) == size(this.theArray[])
this.theArray[] elements == null
this.theArray[].getClass() elements == null
this.topOfStack == -1
===========================================================================
DataStructures.StackAr.isEmpty():::ENTER
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == true)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < DataStructures.StackAr.DEFAULT_CAPACITY)
(this.topOfStack >= 0)  <==>  (return == false)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] != null)
this.theArray.getClass() == orig(this.theArray.getClass())
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="return == true"
this.theArray[] elements == null
this.theArray[].getClass() elements == null
this.topOfStack == -1
return == true
===========================================================================
DataStructures.StackAr.isEmpty():::EXIT;condition="not(return == true)"
this.topOfStack >= 0
return == false
this.theArray[this.topOfStack] != null
===========================================================================
DataStructures.StackAr.isFull():::ENTER
===========================================================================
DataStructures.StackAr.isFull():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(return == false)  <==>  (this.topOfStack < size(this.theArray[])-1)
(return == true)  <==>  (this.topOfStack == size(this.theArray[])-1)
(return == true)  ==>  (this.theArray[] elements != null)
(return == true)  ==>  (this.topOfStack != DataStructures.StackAr.DEFAULT_CAPACITY)
this.theArray.getClass() == orig(this.theArray.getClass())
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="return == true"
this.topOfStack == size(this.theArray[])-1
this.topOfStack == orig(size(this.theArray[]))-1
this.theArray[] elements != null
return == true
this.topOfStack != DataStructures.StackAr.DEFAULT_CAPACITY
===========================================================================
DataStructures.StackAr.isFull():::EXIT;condition="not(return == true)"
return == false
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.makeEmpty():::ENTER
this.topOfStack != DataStructures.StackAr.DEFAULT_CAPACITY
===========================================================================
DataStructures.StackAr.makeEmpty():::EXIT
this.theArray == orig(this.theArray)
size(this.theArray[]) == orig(size(this.theArray[]))
this.theArray[] elements == null
this.theArray[].getClass() elements == null
this.topOfStack == -1
this.theArray.getClass() == orig(this.theArray.getClass())
this.topOfStack <= orig(this.topOfStack)
orig(this.topOfStack) <= size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::ENTER
x != null
this.theArray.getClass() != x.getClass()
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.push(java.lang.Object):::EXIT
this.theArray == orig(this.theArray)
orig(x) == this.theArray[this.topOfStack]
size(this.theArray[]) == orig(size(this.theArray[]))
this.topOfStack >= 0
orig(this.theArray[post(this.topOfStack)]) == null
this.theArray.getClass() == orig(this.theArray.getClass())
this.theArray.getClass() != orig(x.getClass())
orig(x.getClass()) in this.theArray[].getClass()
this.topOfStack - orig(this.topOfStack) - 1 == 0
orig(this.topOfStack) < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.top():::ENTER
===========================================================================
DataStructures.StackAr.top():::EXIT78
this.theArray[] elements == null
this.theArray[].getClass() elements == null
this.topOfStack == -1
return == null
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.top():::EXIT79
return == this.theArray[this.topOfStack]
return == this.theArray[orig(this.topOfStack)]
return == orig(this.theArray[post(this.topOfStack)])
return == orig(this.theArray[this.topOfStack])
this.topOfStack >= 0
return != null
===========================================================================
DataStructures.StackAr.top():::EXIT
this.theArray == orig(this.theArray)
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
(this.topOfStack == -1)  <==>  (return == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == null)
(this.topOfStack == -1)  ==>  (this.theArray[] elements == return)
(this.topOfStack == -1)  ==>  (this.theArray[].getClass() elements == null)
(this.topOfStack == -1)  ==>  (this.topOfStack < DataStructures.StackAr.DEFAULT_CAPACITY)
(this.topOfStack >= 0)  <==>  (return != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[post(this.topOfStack)]) != null)
(this.topOfStack >= 0)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[post(this.topOfStack)]))
(this.topOfStack >= 0)  ==>  (return == orig(this.theArray[this.topOfStack]))
(this.topOfStack >= 0)  ==>  (return == this.theArray[orig(this.topOfStack)])
(this.topOfStack >= 0)  ==>  (return == this.theArray[this.topOfStack])
(this.topOfStack >= 0)  ==>  (return.getClass() in this.theArray[].getClass())
(this.topOfStack >= 0)  ==>  (this.theArray.getClass() != return.getClass())
(this.topOfStack >= 0)  ==>  (this.theArray[orig(this.topOfStack)] != null)
(this.topOfStack >= 0)  ==>  (this.theArray[this.topOfStack] != null)
this.theArray.getClass() != return.getClass()
this.theArray.getClass() == orig(this.theArray.getClass())
return.getClass() in this.theArray[].getClass()
===========================================================================
DataStructures.StackAr.topAndPop():::ENTER
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT112
this.theArray[] == orig(this.theArray[])
this.topOfStack == orig(this.topOfStack)
this.theArray[] elements == null
this.theArray[].getClass() elements == null
this.topOfStack == -1
return == null
this.theArray[] elements == return
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT115
return == orig(this.theArray[this.topOfStack])
return != null
orig(this.topOfStack) >= 0
this.theArray[orig(this.topOfStack)] == null
this.topOfStack - orig(this.topOfStack) + 1 == 0
this.topOfStack < size(this.theArray[])-1
===========================================================================
DataStructures.StackAr.topAndPop():::EXIT
this.theArray == orig(this.theArray)
size(this.theArray[]) == orig(size(this.theArray[]))
(return != null)  <==>  (orig(this.topOfStack) >= 0)
(return != null)  ==>  (orig(this.theArray[this.topOfStack]) != null)
(return != null)  ==>  (return == orig(this.theArray[this.topOfStack]))
(return != null)  ==>  (return.getClass() in orig(this.theArray[].getClass()))
(return != null)  ==>  (this.theArray.getClass() != return.getClass())
(return != null)  ==>  (this.theArray[orig(this.topOfStack)] == null)
(return != null)  ==>  (this.topOfStack - orig(this.topOfStack) + 1 == 0)
(return != null)  ==>  (this.topOfStack < size(this.theArray[])-1)
(return == null)  <==>  (orig(this.topOfStack) == -1)
(return == null)  <==>  (this.topOfStack == orig(this.topOfStack))
(return == null)  ==>  (DataStructures.StackAr.DEFAULT_CAPACITY > orig(this.topOfStack))
(return == null)  ==>  (orig(this.theArray[]) elements == null)
(return == null)  ==>  (orig(this.theArray[]) elements == return)
(return == null)  ==>  (orig(this.theArray[].getClass()) elements == null)
(return == null)  ==>  (this.theArray[] == orig(this.theArray[]))
(return == null)  ==>  (this.theArray[] elements == null)
(return == null)  ==>  (this.theArray[] elements == return)
(return == null)  ==>  (this.theArray[].getClass() elements == null)
(return == null)  ==>  (this.topOfStack < DataStructures.StackAr.DEFAULT_CAPACITY)
(return == null)  ==>  (this.topOfStack == -1)
this.theArray.getClass() != return.getClass()
this.theArray.getClass() == orig(this.theArray.getClass())
this.topOfStack <= orig(this.topOfStack)
return.getClass() in orig(this.theArray[].getClass())
orig(this.topOfStack) <= size(this.theArray[])-1
