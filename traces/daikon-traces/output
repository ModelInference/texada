===========================================================================
DataStructures.MyInteger:::OBJECT
===========================================================================
DataStructures.MyInteger.MyInteger(int):::ENTER
===========================================================================
DataStructures.MyInteger.MyInteger(int):::EXIT
this.value == \old(x)
===========================================================================
DataStructures.QueueAr:::CLASS
===========================================================================
DataStructures.QueueAr:::OBJECT
this.theArray != null
this.theArray.getClass() == java.lang.Object[].class
this.currentSize >= 0
this.front >= 0
this.back >= -1
this.currentSize <= daikon.Quant.size(this.theArray)
this.front <= daikon.Quant.size(this.theArray)
this.back <= daikon.Quant.size(this.theArray)
DataStructures.QueueAr.DEFAULT_CAPACITY != daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.QueueAr(int):::ENTER
===========================================================================
DataStructures.QueueAr.QueueAr(int):::EXIT
this.currentSize == this.front
\old(capacity) == daikon.Quant.size(this.theArray)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
this.back == -1
this.currentSize <= \old(capacity)
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.dequeue():::ENTER
this.currentSize >= 1
this.back >= 0
daikon.Quant.getElement_Object(this.theArray, this.front) != null
daikon.Quant.getElement_Object(this.theArray, this.back) != null
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT94
===========================================================================
DataStructures.QueueAr.dequeue():::EXIT
this.theArray == \old(this.theArray)
this.back == \old(this.back)
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.front))
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize)-1)
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize))) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize-1))
this.back >= 0
\result != null
daikon.Quant.getElement_Object(this.theArray, \old(this.front)) == null
this.theArray.getClass() != \result.getClass()
this.theArray.getClass() == \old(this.theArray.getClass())
this.currentSize - \old(this.currentSize) + 1 == 0
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
daikon.Quant.memberOf(\result.getClass() , \old(daikon.Quant.typeArray(this.theArray)) )
\old(this.currentSize) <= daikon.Quant.size(this.theArray)
\old(this.front) <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::ENTER
x != null
this.theArray.getClass() != x.getClass()
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.enqueue(java.lang.Object):::EXIT
this.theArray == \old(this.theArray)
this.front == \old(this.front)
\old(x) == daikon.Quant.getElement_Object(this.theArray, this.back)
daikon.Quant.size(this.theArray) == \old(daikon.Quant.size(this.theArray))
daikon.Quant.getElement_Object(this.theArray, this.currentSize-1) == daikon.Quant.getElement_Object(this.theArray, \old(this.currentSize))
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.theArray, this.currentSize))
this.currentSize >= 1
this.back >= 0
daikon.Quant.getElement_Object(this.theArray, this.front) != null
\old(daikon.Quant.getElement_Object(this.theArray, \new(this.back))) == null
this.theArray.getClass() == \old(this.theArray.getClass())
this.theArray.getClass() != \old(x.getClass())
daikon.Quant.memberOf(\old(x.getClass()) , daikon.Quant.typeArray(this.theArray) )
this.currentSize - \old(this.currentSize) - 1 == 0
this.front <= daikon.Quant.size(this.theArray)-1
this.back != \old(this.back)
this.back <= daikon.Quant.size(this.theArray)-1
\old(this.currentSize) <= daikon.Quant.size(this.theArray)-1
\old(this.back) <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.getFront():::ENTER
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT77
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
this.front == 0 || this.front == 6
\result == null
daikon.Quant.eltsEqual(this.theArray, \result)
this.currentSize <= this.front
this.front < DataStructures.QueueAr.DEFAULT_CAPACITY
this.back != DataStructures.QueueAr.DEFAULT_CAPACITY
===========================================================================
DataStructures.QueueAr.getFront():::EXIT78
\result == daikon.Quant.getElement_Object(this.theArray, this.front)
\result == daikon.Quant.getElement_Object(this.theArray, \old(this.front))
\result == \old(daikon.Quant.getElement_Object(this.theArray, \new(this.front)))
\result == \old(daikon.Quant.getElement_Object(this.theArray, this.front))
this.currentSize >= 1
this.back >= 0
\result != null
daikon.Quant.getElement_Object(this.theArray, this.back) != null
this.front <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.getFront():::EXIT
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
(\result == null) == (this.currentSize == 0)
(this.back != DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.back >= -1) || !(this.currentSize == 0)
(this.currentSize < DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.currentSize <= this.front) || !(this.currentSize == 0)
(this.front < DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.front == 0 || this.front == 6) || !(this.currentSize == 0)
(daikon.Quant.eltsEqual(this.theArray, null)) || !(this.currentSize == 0)
(daikon.Quant.eltsEqual(this.theArray, \result)) || !(this.currentSize == 0)
(daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)) || !(this.currentSize == 0)
this.theArray.getClass() != \result.getClass()
this.theArray.getClass() == \old(this.theArray.getClass())
daikon.Quant.memberOf(\result.getClass() , daikon.Quant.typeArray(this.theArray) )
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.increment(int):::ENTER
x >= -1
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
x <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.increment(int):::EXIT
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
\result >= 0
this.theArray.getClass() == \old(this.theArray.getClass())
this.currentSize <= daikon.Quant.size(this.theArray)-1
this.front <= daikon.Quant.size(this.theArray)-1
this.back <= daikon.Quant.size(this.theArray)-1
\result <= daikon.Quant.size(this.theArray)-1
\old(x) <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.isEmpty():::ENTER
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.isEmpty():::EXIT
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
(\result == true) == (this.currentSize == 0)
(this.back != DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.back >= -1) || !(this.currentSize == 0)
(this.currentSize < DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.currentSize <= this.front) || !(this.currentSize == 0)
(this.front < DataStructures.QueueAr.DEFAULT_CAPACITY) || !(this.currentSize == 0)
(this.front == 0 || this.front == 6) || !(this.currentSize == 0)
(daikon.Quant.eltsEqual(this.theArray, null)) || !(this.currentSize == 0)
(daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)) || !(this.currentSize == 0)
this.theArray.getClass() == \old(this.theArray.getClass())
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.isFull():::ENTER
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.isFull():::EXIT
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == \old(this.currentSize)
this.front == \old(this.front)
this.back == \old(this.back)
(this.currentSize <= daikon.Quant.size(this.theArray)-1) == (\result == false)
(this.front <= daikon.Quant.size(this.theArray)-1) || !(\result == false)
(this.currentSize == daikon.Quant.size(this.theArray)) == (\result == true)
(this.back != DataStructures.QueueAr.DEFAULT_CAPACITY) || !(\result == true)
(this.back == daikon.Quant.size(this.theArray)-1) || !(\result == true)
(this.currentSize >= this.front) || !(\result == true)
(this.front < DataStructures.QueueAr.DEFAULT_CAPACITY) || !(\result == true)
(this.front == 0) || !(\result == true)
(daikon.Quant.eltsNotEqual(this.theArray, null)) || !(\result == true)
(daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), "DataStructures.MyInteger")) || !(\result == true)
this.theArray.getClass() == \old(this.theArray.getClass())
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueAr.makeEmpty():::ENTER
this.currentSize == this.front
this.currentSize == this.back
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
===========================================================================
DataStructures.QueueAr.makeEmpty():::EXIT
this.theArray == \old(this.theArray)
daikon.Quant.pairwiseEqual(this.theArray, \old(this.theArray))
this.currentSize == this.front
this.currentSize == \old(this.currentSize)
this.currentSize == \old(this.front)
this.currentSize == \old(this.back)
daikon.Quant.eltsEqual(this.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.theArray), null)
this.currentSize == 0
this.back == -1
this.theArray.getClass() == \old(this.theArray.getClass())
this.back <= daikon.Quant.size(this.theArray)-1
===========================================================================
DataStructures.QueueArTester:::OBJECT
this != null
this.q != null
this.q.theArray != null
this.q.theArray.getClass() == java.lang.Object[].class
this.q.currentSize >= 0
this.q.front >= 0
this.q.back >= -1
this.q.currentSize <= daikon.Quant.size(this.q.theArray)
this.q.front <= daikon.Quant.size(this.q.theArray)
this.q.back <= daikon.Quant.size(this.q.theArray)-1
DataStructures.QueueAr.DEFAULT_CAPACITY != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.QueueArTester():::EXIT
this.q.currentSize == this.q.front
this.q.currentSize == daikon.Quant.size(this.q.theArray)
this.q.back == daikon.Quant.size(this.q.theArray)-1
this.q != null
this.q.theArray != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.q.theArray), new String[] {  })
===========================================================================
DataStructures.QueueArTester.createItem(int):::ENTER
this.q.currentSize <= daikon.Quant.size(this.q.theArray)-1
this.q.front != i
this.q.front <= daikon.Quant.size(this.q.theArray)-1
this.q.back != i
DataStructures.QueueAr.DEFAULT_CAPACITY != i
i != daikon.Quant.size(this.q.theArray)
i != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.createItem(int):::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
daikon.Quant.pairwiseEqual(this.q.theArray, \old(this.q.theArray))
this.q.currentSize == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == \old(this.q.back)
\result != null
\result.getClass() == DataStructures.MyInteger.class
this.q.theArray.getClass() != \result.getClass()
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize <= daikon.Quant.size(this.q.theArray)-1
this.q.front != \old(i)
this.q.front <= daikon.Quant.size(this.q.theArray)-1
this.q.back != \old(i)
\old(i) != daikon.Quant.size(this.q.theArray)
\old(i) != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.dequeue():::ENTER
this.q.currentSize >= 1
this.q.back >= 0
daikon.Quant.getElement_Object(this.q.theArray, this.q.front) != null
daikon.Quant.getElement_Object(this.q.theArray, this.q.back) != null
this.q.front <= daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.dequeue():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
this.q.back == \old(this.q.back)
daikon.Quant.size(this.q.theArray) == \old(daikon.Quant.size(this.q.theArray))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.currentSize)-1)
\old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.currentSize))) == \old(daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize-1))
this.q.back >= 0
daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.front)) == null
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize - \old(this.q.currentSize) + 1 == 0
this.q.currentSize <= daikon.Quant.size(this.q.theArray)-1
this.q.front <= daikon.Quant.size(this.q.theArray)-1
\old(this.q.currentSize) <= daikon.Quant.size(this.q.theArray)
\old(this.q.front) <= daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.dequeueAll():::ENTER
this.q.currentSize == daikon.Quant.size(this.q.theArray)
this.q.back == daikon.Quant.size(this.q.theArray)-1
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), "DataStructures.MyInteger")
this.q.front == 0
this.q.currentSize >= this.q.front
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
===========================================================================
DataStructures.QueueArTester.dequeueAll():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
this.q.currentSize == this.q.front
this.q.currentSize == \old(this.q.front)
this.q.back == \old(this.q.back)
this.q.back == daikon.Quant.size(this.q.theArray)-1
this.q.back == \old(daikon.Quant.size(this.q.theArray))-1
\old(this.q.currentSize) == daikon.Quant.size(this.q.theArray)
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.currentSize == 0
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize <= \old(this.q.currentSize)
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
===========================================================================
DataStructures.QueueArTester.doNew(int):::ENTER
this.q.front == 0 || this.q.front == 6
this.q.currentSize <= DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.currentSize <= size
this.q.front < DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.front != size
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.back != size
size != daikon.Quant.size(this.q.theArray)
size != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.doNew(int):::EXIT
this.q.currentSize == this.q.front
\old(size) == daikon.Quant.size(this.q.theArray)
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.currentSize == 0
this.q.back == -1
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize <= \old(this.q.currentSize)
this.q.currentSize <= \old(this.q.front)
this.q.currentSize <= \old(size)
this.q.currentSize <= \old(daikon.Quant.size(this.q.theArray))
this.q.back < \old(this.q.currentSize)
this.q.back < \old(this.q.front)
this.q.back <= \old(this.q.back)
this.q.back <= \old(daikon.Quant.size(this.q.theArray))-1
DataStructures.QueueAr.DEFAULT_CAPACITY >= \old(this.q.currentSize)
DataStructures.QueueAr.DEFAULT_CAPACITY > \old(this.q.front)
\old(this.q.back) != daikon.Quant.size(this.q.theArray)-1
daikon.Quant.size(this.q.theArray)-1 != \old(daikon.Quant.size(this.q.theArray))-1
===========================================================================
DataStructures.QueueArTester.enqueue(int):::ENTER
this.q.currentSize <= daikon.Quant.size(this.q.theArray)-1
this.q.front != x
this.q.front <= daikon.Quant.size(this.q.theArray)-1
this.q.back != x
DataStructures.QueueAr.DEFAULT_CAPACITY != x
x != daikon.Quant.size(this.q.theArray)
x != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.enqueue(int):::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
this.q.front == \old(this.q.front)
daikon.Quant.size(this.q.theArray) == \old(daikon.Quant.size(this.q.theArray))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize-1) == daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.currentSize))
\old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize))
this.q.currentSize >= 1
this.q.back >= 0
daikon.Quant.getElement_Object(this.q.theArray, this.q.front) != null
daikon.Quant.getElement_Object(this.q.theArray, this.q.back) != null
\old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.back))) == null
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize - \old(this.q.currentSize) - 1 == 0
this.q.currentSize != \old(x)
this.q.front != \old(x)
this.q.front <= daikon.Quant.size(this.q.theArray)-1
this.q.back != \old(this.q.back)
\old(this.q.currentSize) <= daikon.Quant.size(this.q.theArray)-1
\old(this.q.back) <= daikon.Quant.size(this.q.theArray)-1
\old(x) != daikon.Quant.size(this.q.theArray)
\old(x) != daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.enqueue(java.lang.Object):::ENTER
o != null
this.q.theArray.getClass() != o.getClass()
this.q.currentSize <= daikon.Quant.size(this.q.theArray)-1
this.q.front <= daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.enqueue(java.lang.Object):::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
this.q.front == \old(this.q.front)
\old(o) == daikon.Quant.getElement_Object(this.q.theArray, this.q.back)
daikon.Quant.size(this.q.theArray) == \old(daikon.Quant.size(this.q.theArray))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize-1) == daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.currentSize))
\old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.currentSize)-1)) == \old(daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize))
this.q.currentSize >= 1
this.q.back >= 0
daikon.Quant.getElement_Object(this.q.theArray, this.q.front) != null
\old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.back))) == null
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.theArray.getClass() != \old(o.getClass())
daikon.Quant.memberOf(\old(o.getClass()) , daikon.Quant.typeArray(this.q.theArray) )
this.q.currentSize - \old(this.q.currentSize) - 1 == 0
this.q.front <= daikon.Quant.size(this.q.theArray)-1
this.q.back != \old(this.q.back)
\old(this.q.currentSize) <= daikon.Quant.size(this.q.theArray)-1
\old(this.q.back) <= daikon.Quant.size(this.q.theArray)-1
===========================================================================
DataStructures.QueueArTester.fillAndEmpty(int):::ENTER
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.currentSize == 0
this.q.front == 0 || this.q.front == 6
this.q.currentSize <= this.q.front
this.q.currentSize <= n
this.q.front < DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.front != n
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.back != n
n != daikon.Quant.size(this.q.theArray)
n != daikon.Quant.size(this.q.theArray)-1
2 * this.q.front + 3 * this.q.back - 3 * daikon.Quant.size(this.q.theArray) + 3 == 0
2 * this.q.front + 3 * this.q.back - 3 * daikon.Quant.size(this.q.theArray)-1 == 0
===========================================================================
DataStructures.QueueArTester.fillAndEmpty(int):::EXIT
this.q.currentSize == this.q.front
this.q.currentSize == \old(this.q.currentSize)
this.q.back == daikon.Quant.size(this.q.theArray)-1
\old(n) == daikon.Quant.size(this.q.theArray)
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.currentSize == 0
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize <= \old(this.q.front)
this.q.currentSize <= \old(n)
this.q.currentSize <= \old(daikon.Quant.size(this.q.theArray))
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.back != \old(this.q.back)
this.q.back != \old(daikon.Quant.size(this.q.theArray))-1
DataStructures.QueueAr.DEFAULT_CAPACITY > \old(this.q.front)
===========================================================================
DataStructures.QueueArTester.getFront():::ENTER
===========================================================================
DataStructures.QueueArTester.getFront():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
daikon.Quant.pairwiseEqual(this.q.theArray, \old(this.q.theArray))
this.q.currentSize == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == \old(this.q.back)
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
===========================================================================
DataStructures.QueueArTester.isEmpty():::ENTER
===========================================================================
DataStructures.QueueArTester.isEmpty():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
daikon.Quant.pairwiseEqual(this.q.theArray, \old(this.q.theArray))
this.q.currentSize == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == \old(this.q.back)
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
===========================================================================
DataStructures.QueueArTester.isFull():::ENTER
===========================================================================
DataStructures.QueueArTester.isFull():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
daikon.Quant.pairwiseEqual(this.q.theArray, \old(this.q.theArray))
this.q.currentSize == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == \old(this.q.back)
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
===========================================================================
DataStructures.QueueArTester.main(java.lang.String[]):::ENTER
args != null
args.getClass() == java.lang.String[].class
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
DataStructures.QueueArTester.main(java.lang.String[]):::EXIT
daikon.Quant.pairwiseEqual(args, \old(args))
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.collectObject(args, "toString()"), new String[] {  })
===========================================================================
DataStructures.QueueArTester.observe():::ENTER
===========================================================================
DataStructures.QueueArTester.observe():::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
daikon.Quant.pairwiseEqual(this.q.theArray, \old(this.q.theArray))
this.q.currentSize == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == \old(this.q.back)
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
===========================================================================
DataStructures.QueueArTester.repEnqueue(int):::ENTER
this.q.currentSize == this.q.front
n == daikon.Quant.size(this.q.theArray)
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.currentSize == 0
this.q.back == -1
===========================================================================
DataStructures.QueueArTester.repEnqueue(int):::EXIT
this.q == \old(this.q)
this.q.theArray == \old(this.q.theArray)
this.q.currentSize == \old(n)
this.q.front == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.back == daikon.Quant.size(this.q.theArray)-1
this.q.back == \old(daikon.Quant.size(this.q.theArray))-1
\old(n) == daikon.Quant.size(this.q.theArray)
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), "DataStructures.MyInteger")
this.q.front == 0
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.front <= \old(n)
this.q.back != DataStructures.QueueAr.DEFAULT_CAPACITY
this.q.back >= \old(this.q.back)
===========================================================================
DataStructures.QueueArTester.run():::ENTER
this.q.currentSize == this.q.front
this.q.currentSize == daikon.Quant.size(this.q.theArray)
this.q.back == daikon.Quant.size(this.q.theArray)-1
this.q != null
this.q.theArray != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.q.theArray), new String[] {  })
===========================================================================
DataStructures.QueueArTester.run():::EXIT
this.q.front == \old(this.q.currentSize)
this.q.front == \old(this.q.front)
this.q.front == \old(daikon.Quant.size(this.q.theArray))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize-1) == daikon.Quant.getElement_Object(this.q.theArray, this.q.back)
this.q != null
this.q.theArray != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.q.theArray), new String[] { "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", "DataStructures.MyInteger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null })
this.q.currentSize == 15
this.q.back == 14
daikon.Quant.size(this.q.theArray) == 30
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == null
daikon.Quant.getElement_Object(this.q.theArray, this.q.front) != null
daikon.Quant.getElement_Object(this.q.theArray, this.q.back) != null
daikon.Quant.getElement_Object(this.q.theArray, this.q.back-1) != null
daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY) != null
daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1) != null
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
===========================================================================
DataStructures.QueueArTester.variedTypes():::ENTER
this.q.currentSize == this.q.front
this.q.currentSize == daikon.Quant.size(this.q.theArray)
this.q.back == daikon.Quant.size(this.q.theArray)-1
this.q != null
this.q.theArray != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.q.theArray), new String[] {  })
===========================================================================
DataStructures.QueueArTester.variedTypes():::EXIT
this.q.currentSize == \old(this.q.currentSize)
this.q.currentSize == \old(this.q.front)
this.q.currentSize == \old(daikon.Quant.size(this.q.theArray))
DataStructures.QueueAr.DEFAULT_CAPACITY == daikon.Quant.size(this.q.theArray)
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1)
daikon.Quant.getElement_Object(this.q.theArray, this.q.front) == daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1)
daikon.Quant.getElement_Object(this.q.theArray, this.q.front-1) == daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1)
daikon.Quant.getElement_Object(this.q.theArray, this.q.back) == daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1)
daikon.Quant.getElement_Object(this.q.theArray, this.q.back-1) == daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1)
daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1) == daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.currentSize))
daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1) == daikon.Quant.getElement_Object(this.q.theArray, \old(this.q.front))
this.q != null
this.q.theArray != null
("oneOf.java.jpp: SEQUENCE unimplemented" != null)
daikon.Quant.eltsEqual(this.q.theArray, null)
daikon.Quant.pairwiseEqual(daikon.Quant.typeArray(this.q.theArray), new String[] { null, null, null, null, null, null, null, null, null, null })
daikon.Quant.eltsEqual(daikon.Quant.typeArray(this.q.theArray), null)
this.q.front == 6
this.q.back == 5
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
daikon.Quant.eltsEqual(this.q.theArray, daikon.Quant.getElement_Object(this.q.theArray, DataStructures.QueueAr.DEFAULT_CAPACITY-1))
===========================================================================
DataStructures.QueueArTester.walkAround(int):::ENTER
this.q.front == 0
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == null
===========================================================================
DataStructures.QueueArTester.walkAround(int):::EXIT
this.q.front == \old(this.q.front)
\old(n) == daikon.Quant.size(this.q.theArray)
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == daikon.Quant.getElement_Object(this.q.theArray, \old(n)-1)
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == \old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.currentSize)-1))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == \old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.back)))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == \old(daikon.Quant.getElement_Object(this.q.theArray, \new(this.q.back)-1))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == \old(daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize))
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize-1) == daikon.Quant.getElement_Object(this.q.theArray, this.q.back)
this.q.front == 0
daikon.Quant.getElement_Object(this.q.theArray, this.q.currentSize) == null
this.q.theArray.getClass() == \old(this.q.theArray.getClass())
this.q.currentSize - this.q.back - 1 == 0
